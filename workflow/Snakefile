__author__ = "Homa Papoli Yazdi"
__email__ = "homa.papoli_yazdi@biol.lu.se"

configfile: "config/config.yaml"

import pandas as pd
import os

localrules: all, multiqc

design_table = pd.read_table(config["sample_table"], sep="\t") # index the pandas table
# design_table.set_index("species_name", inplace=True)
sample_name = design_table.Sample_Name
read_name = design_table.Read_Name
fastq1 = design_table.fq1
fastq2 = design_table.fq2
all_fastq = list(fastq1) + list(fastq2)
all_samples = [sample.split("/")[-1].split(".")[0] for sample in all_fastq]

# def get_all_fastq():
#     design_table = pd.read_csv(config["sample_table"], sep="\t", index_col=0)
#     x = list(design_table["fq1"])+list(design_table["fq2"])
#     x = [i.split("/")[-1].split(".")[0] for i in x if str(i)!="nan"]
#     return x

def get_full_path(sample_name):
    design_table = pd.read_csv(config["sample_table"], sep="\t", index_col=0)
    for i,row in design_table.iterrows():
        if str(row["fq1"])!="nan":
            if row["fq1"].find(sample_name)>-1:
                return row["fq1"]
        if str(row["fq2"])!="nan":
            if row["fq2"].find(sample_name)>-1:
                return row["fq2"]
# Problematic one here
# rule create_adapter_files:
#     # input:
#     #     sample_design=config["sample_table"]
#     # output:
#     #     path_adapter="data/adapters/{sample}.txt"
#     run:
        # os.mkdir(output.adapter_dir)
# os.mkdir("data/adapters")
# design_table = pd.read_csv(config["sample_table"],sep="\t", index_col=0)
# for index, row in design_table.iterrows():
#     fname = row["fq1"].split("/")[-1].split(".")[0]+".txt"
#     path_adapter = os.path.join("data/adapters", fname)
#     with open(path_adapter, "w") as f:
#         f.write("IDT_Illumina_TruSeq_UD_index_adapter_Read1"+"\t"+row["Adapter_Read1"]+"\n")
# for index, row in design_table.iterrows():
#     fname = row["fq2"].split("/")[-1].split(".")[0]+".txt"
#     path_adapter = os.path.join("data/adapters", fname)
#     with open(path_adapter, "w") as f:
#         f.write("IDT_Illumina_TruSeq_UD_index_adapter_Read2"+"\t"+row["Adapter_Read2"]+"\n")

# rule all: # needs the output directory
#     input: 
#         html_output = expand(os.path.join("{output_dir}", "{sample}_fastqc.html"), output_dir=config["output_dir"], sample=all_samples)

# rule all:
#     input:
#         "results/multiqc/multiqc_report.html"

rule all:
    input:
        expand("result/fastp_report/{readname}.html", readname=read_name)

rule fastqc:
    input:
        #fastq=expand("fastq_dir/{sample}_R{pair}_001.fastq.gz", sample=config["samples"], pair=config["fastq_pairs"])
        fastq_path = lambda wildcards: get_full_path(wildcards.sample)
    output:
        #html=expand("fastqc_dir/{sample}_R{pair}_001_fastqc.html", sample=config["samples"], pair=config["fastq_pairs"]),
        #zip=expand("fastqc_dir/{sample}_R{pair}_001_fastqc.zip", sample=config["samples"], pair=config["fastq_pairs"])
        os.path.join("{output_dir}", "{sample}_fastqc.html")
    params:
        outdir="{output_dir}",
        sample_adapter=os.path.join("data/adapters", "{sample}.txt")
    log:
        log_file=os.path.join("{output_dir}", "local_log", \
        "run_FastQC_{sample}.log")
    resources:
        threads = 4,
        mem_mb = 24000,
        runtime = "2h"
    benchmark:
        os.path.join("{output_dir}", "cluster_log", "run_FastQC_{sample}.benchmark.log")
    conda:
        "envs/fastqc.yaml"
    shell:
        """
        fastqc {input} \
        threads {resources.threads} \
        --outdir {params.outdir} \
        --kmers 7 \
        --adapters {params.sample_adapter} \
        &> {log.log_file} 
        """
# #snakemake --rerun-incomplete --executor slurm --default-resources slurm_account=naiss2024-5-92 slurm_partition=core --jobs=10 --printshellcmds --cores=10 --latency-wait=60 --use-conda
rule multiqc:
    input:
        expand("results/fastqc/{sample}_fastqc.html", sample=all_samples)
    output:
        "results/multiqc/multiqc_report.html"
    conda:
        "envs/multiqc.yaml"
    shell:
        "multiqc results/fastqc/*fastqc.zip -o results/multiqc"
# WA-3565-13-100	data/fastq/WA-3565-13-100_S31_L004_R1_001.fastq.gz	
rule filtering_fastp:
    input:
        fastq1="data/fastq/{readname}_R1_001.fastq.gz",
        fastq2="data/fastq/{readname}_R2_001.fastq.gz"
    output:
        fastq1_filtered="data/fastq_filtered/{readname}_R1_001.filtered.fastq.gz",
        fastq2_filtered="data/fastq_filtered/{readname}_R2_001.filtered.fastq.gz",
        unpaired1="data/fastq_unpaired/{readname}_unpaired1.fastq.gz",
        unpaired2="data/fastq_unpaired/{readname}_unpaired2.fastq.gz",
        failed_out="data/fastq_failed/{readname}.failed.fastq.gz",
        html_report="result/fastp_report/{readname}.html"
    resources:
        threads=6,
        runtime="2h"
    conda:
        "envs/fastp.yaml"
    shell:
        """
        fastp \
        --in1 {input.fastq1} \
        --in2 {input.fastq2} \
        --out1 {output.fastq1_filtered} \
        --out2 {output.fastq2_filtered} \
        --unpaired1 {output.unpaired1}
        --unpaired2 {output.unpaired2}
        --failed_out {output.failed_out} \
        --html {output.html_report}
        --trim_poly_g \
        --qualified_quality_phred=30 \
        --unqualified_percent_limit=0 \
        --length_required=140 \
        --overrepresentation_analysis \
        --adapter_sequence "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA" \
        --adapter_sequence_r2 "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT" \
        --thread 6 
        """

genome="ASM69896v1_HiC"

rule bwa_index:
    input:
        "data/genome/{genome}.fasta",
    output:
        idx=multiext("data/genome/{genome}", ".amb", ".ann", ".bwt", ".pac", ".sa"),
    log:
        "logs/bwa_index/{genome}.log",
    conda:
        "envs/bwa.yaml"
    shell:
        """
        bwa index {input}
        """

# P18758_101 @RG\\tID:A00187.430.BHVGGJDSXY.1\\tPL:Illumina\\tLB:P18758_101.IDT_10nt_UD_211\\tSM:P18758_101\\tPU:A00187.430.BHVGGJDSXY.1.IDT_10nt_UD_211
rule bwa_mem:
    input:
        reads=["data/fastq_filtered/{readname}_R1_001.filtered.fastq.gz", "data/fastq_filtered/{readname}_R2_001.filtered.fastq.gz"],
        genome_fasta="data/genome/{genome}.fasta"
    output:
        "results/mapped/{readname}.sorted.bam",
        "results/mapped/{readname}.sorted.bai"
        "results/mapped/{readname}.flagstats.txt"
    log:
        "logs/bwa_mem/{readname}.log",
    params:
        readgroup=r"-R '@RG\tID:{sample}\tSM:{sample}'",
        sorting="none",  # Can be 'none', 'samtools' or 'picard'.
        sort_order="queryname",  # Can be 'queryname' or 'coordinate'.
        sort_extra="",  # Extra args for samtools/picard.
    resources:
        threads: 8
    conda:
        "envs/bwa.yaml"
        "envs/samtools.yaml"
    shell:
        """
        bwa mem -M -t 8 -R {params.readgroup} {input.genome_fasta} {input.reads} | \
        tee > (samtools flagstat - > {wildcards.sample}.flagstats.txt) | \
        samtools sort -O BAM | tee {sample}.sorted.bam | samtools index - {sample}.sorted.bai 2> {log}
        """

# Mark Duplicate

# Haplotype Caller

# GenomicsDBImport

# genotypeGVCF