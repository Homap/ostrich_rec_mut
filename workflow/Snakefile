__author__ = "Homa Papoli Yazdi"
__email__ = "homa.papoli_yazdi@biol.lu.se"
#--------------------------------------------------------------------------------------------------------------------------------------------------#
configfile: "config/config.yaml"
localrules: all, multiqc, multiqc_after_filtering, multiqc_after_filtering_bbtools, create_intervals
#--------------------------------------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------Import Python modules----------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------------------------------------#
import pandas as pd
import os
#--------------------------------------------------------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------Reading design table-----------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------------------------------------#
design_table = pd.read_table(config["sample_table"], sep="\t")
sample_name = design_table.Sample_Name
fastq_name = design_table.Fastq_Name
#--------------------------------------------------Function to get Read Group for each sample------------------------------------------------------#
def get_readgroup(sample_name):
    read_group = pd.read_table("config/ReadGroup.txt", sep="\t")
    read_group_dict = dict(read_group.values)
    return read_group_dict[sample_name]
#--------------------------------------------------------------------------------------------------------------------------------------------------#
rule all:
    input: 
        html_output = expand([
        "data/fastq_bbtools_filtered/{sample}_{pair}_001.adapters.fastq.gz",
        "data/fastq_bbtools_filtered/{sample}_{pair}_001.filterbytile.fastq.gz",
        "data/fastq_bbtools_filtered/{sample}_{pair}_001.polyfilter.fastq.gz",
        "data/fastq_bbtools_filtered/{sample}_{pair}_001.bbdukpoly.fastq.gz",
        "results/fastqc_filtered_bbtools/{sample}_{pair}_001.bbdukpoly_fastqc.html",
        "results/fastqc_filtered_bbtools/{sample}_{pair}_001.bbdukpoly_fastqc.zip",
        "results/multiqc_filtered_bbtools/multiqc_report_bbtools.html"], \
        sample=fastq_name, pair=config["pair"], genome=config["genome"], num=[i for i in range(1, 2)])#17)])
# "results/fastqc/{sample}_{pair}_001_fastqc.html",
#         "results/multiqc/multiqc_report.html",  "results/fastp_report/{sample}.html",
#         "results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.html",
#         "results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.zip",
#         "results/multiqc_filtered/multiqc_report.html",
        # "data/genome/{genome}.fasta.amb",
        # "data/genome/{genome}.fasta.ann",
        # "data/genome/{genome}.fasta.bwt",
        # "data/genome/{genome}.fasta.pac",
        # "data/genome/{genome}.fasta.sa",
        # "results/mapped/{sample}.sorted.bam",
        # "results/mapped/{sample}.sorted.bai",
        # "results/mapped/{sample}.flagstats.txt",
        # "results/mapped_dedup/{sample}.dedup.bam",
        # "results/mapped_dedup/{sample}.metrics.txt",
        # "config/intervals/interval_{num}.bed",
        # "data/genome/{genome}.dict",
        # "data/genome/ASM69896v1_HiC.fasta.fai",
        # "results/gvcf/{sample}/{sample}.{num}.gvcf"

#--------------------------------------------------------------------------------------------------------------------------------------------------#
# Check the genome assembly ASM69896v1_HiC.fasta
#--------------------------------------------------------------------------------------------------------------------------------------------------#
# HiC
# How do enhancers target to specific genes from a distance? Very often, enhancers can be looped to the promoter of the gene undergoing expression.
# Chromatin is packaged into the nucleus. Filling the human genome into the nucleus is similar to fill a string of 44 miles long into a basketball.
# Enhancer-Promoter Interactions Relate to Disseases - Oncogene on/off Flavahan et al Nature 2015 and Hnsiz et al Science 2016. Polyploidy and Chromatin interaction- MYC example
# Chromatin Conformation Capture : Early technique



# rule fastqc:
#     input:
#        fastq="data/fastq/{sample}_{pair}_001.fastq.gz",
#     output:
#         fastqc_html="results/fastqc/{sample}_{pair}_001_fastqc.html",
#         fastqc_zip="results/fastqc/{sample}_{pair}_001_fastqc.zip"
#     params:
#         outdir="results/fastqc",
#         sample_adapter="data/adapters/adapters.txt"
#     resources:
#         threads = 1,
#         mem_mb = 64000,
#         runtime = "3h"
#     singularity:
#         "containers/fastqc_0.12.1.sif"
#     shell:
#         """
#         fastqc {input} \
#         threads {resources.threads} \
#         --outdir {params.outdir} \
#         --kmers 7 \
#         --adapters {params.sample_adapter}
#         """

# rule multiqc:
#     input:
#         expand("results/fastqc/{sample}_{pair}_001_fastqc.zip", sample=fastq_name, pair=config["pair"])
#     output:
#         "results/multiqc/multiqc_report.html"
#     singularity:
#         "containers/multiqc_v1.25.sif"
#     shell:
#         "multiqc results/fastqc/*fastqc.zip -o results/multiqc"

# rule filtering_fastp:
#     input:
#         fastq1="data/fastq/{sample}_R1_001.fastq.gz",
#         fastq2="data/fastq/{sample}_R2_001.fastq.gz"
#     output:
#         fastq1_filtered="data/fastq_filtered/{sample}_R1_001.filtered.fastq.gz",
#         fastq2_filtered="data/fastq_filtered/{sample}_R2_001.filtered.fastq.gz",
#         unpaired1="data/fastq_unpaired/{sample}_unpaired1.fastq.gz",
#         unpaired2="data/fastq_unpaired/{sample}_unpaired2.fastq.gz",
#         failed_out="data/fastq_failed/{sample}.failed.fastq.gz",
#         html_report="results/fastp_report/{sample}.html"
#     params:
#         adapter_fasta="data/adapters/seqs_to_remove.fasta"
#     resources:
#         threads=10,
#         runtime="12h"
#     singularity:
#         "containers/fastp_0.23.4.sif"
#     shell:
#         """
#         fastp \
#         --in1 {input.fastq1} \
#         --in2 {input.fastq2} \
#         --out1 {output.fastq1_filtered} \
#         --out2 {output.fastq2_filtered} \
#         --unpaired1 {output.unpaired1} \
#         --unpaired2 {output.unpaired2} \
#         --failed_out {output.failed_out} \
#         --html {output.html_report} \
#         --trim_poly_g 12 \
#         --qualified_quality_phred=20 \
#         --unqualified_percent_limit=40 \
#         --length_required=140 \
#         --overrepresentation_analysis \
#         --adapter_fasta {params.adapter_fasta} \
#         --thread {resources.threads}
#         """

# rule fastqc_after_filtering:
#     input:
#        fastq="data/fastq_filtered/{sample}_{pair}_001.filtered.fastq.gz"
#     output:
#         fastqc_html="results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.html",
#         fastqc_zip="results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.zip"
#     params:
#         outdir="results/fastqc_filtered",
#         sample_adapter="data/adapters/adapters.txt"
#     resources:
#         threads = 1,
#         mem_mb = 6400,
#         runtime = "3h"
#     singularity:
#         "containers/fastqc_0.12.1.sif"
#     shell:
#         """
#         fastqc {input} \
#         threads {resources.threads} \
#         --outdir {params.outdir} \
#         --kmers 7 \
#         --adapters {params.sample_adapter}
#         """

# rule multiqc_after_filtering:
#     input:
#         expand("results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.zip", sample=fastq_name, pair=config["pair"])
#     output:
#         "results/multiqc_filtered/multiqc_report.html"
# #    conda:
# #        "envs/multiqc.yaml"
#     singularity:
#         "containers/multiqc_v1.25.sif"
#     shell:
#         "multiqc results/fastqc_filtered/*filtered_fastqc.zip -o results/multiqc_filtered"
# Adapter trim reads
rule adapter_trim_bbduk:
    input:
        fastq1="data/fastq/{sample}_R1_001.fastq.gz",
        fastq2="data/fastq/{sample}_R2_001.fastq.gz"
    output:
        fastq_out1=temp("data/fastq_bbtools_filtered/{sample}_R1_001.adapters.fastq.gz"),
        fastq_out2=temp("data/fastq_bbtools_filtered/{sample}_R2_001.adapters.fastq.gz"),
        stats="data/fastq_bbtools_filtered/{sample}.stats.txt"
    params:
        adapter_fasta="data/adapters/adapters.fasta",
        mem="-Xmx36g"
    resources:
        threads=6,
        runtime="5h",
        mem_mb=36000
    singularity:
        "containers/bbtools_39.10.sif"
    shell:
        """
        bbduk.sh {params.mem}\
        in1={input.fastq1} \
        in2={input.fastq2} \
        out1={output.fastq_out1} \
        out2={output.fastq_out2} \
        minlen=140 \
        threads={resources.threads} \
        ref={params.adapter_fasta} \
        stats={output.stats}
        """

rule filterbytile:
    input:
        fastq1="data/fastq_bbtools_filtered/{sample}_R1_001.adapters.fastq.gz",
        fastq2="data/fastq_bbtools_filtered/{sample}_R2_001.adapters.fastq.gz"
    output:
        fastq_out1=temp("data/fastq_bbtools_filtered/{sample}_R1_001.filterbytile.fastq.gz"),
        fastq_out2=temp("data/fastq_bbtools_filtered/{sample}_R2_001.filterbytile.fastq.gz")
    params:
        mem="-Xmx55g"
    resources:
        threads=10,
        runtime="5h",
        mem_mb=60000
    singularity:
        "containers/bbtools_39.10.sif"
    shell:
        """
        filterbytile.sh {params.mem} in1={input.fastq1} in2={input.fastq2} out1={output.fastq_out1} out2={output.fastq_out2} 
        """

rule polyfilter:
    input:
        fastq1="data/fastq_bbtools_filtered/{sample}_R1_001.filterbytile.fastq.gz",
        fastq2="data/fastq_bbtools_filtered/{sample}_R2_001.filterbytile.fastq.gz",
    output:
        fastq_out1=temp("data/fastq_bbtools_filtered/{sample}_R1_001.polyfilter.fastq.gz"),
        fastq_out2=temp("data/fastq_bbtools_filtered/{sample}_R2_001.polyfilter.fastq.gz"),
        outb="data/fastq_bbtools_filtered/{sample}.homopolymers.fastq.gz"
    params:
        mem="-Xmx55g"
    resources:
        threads=10,
        runtime="5h",
        mem_mb=60000
    singularity:
        "containers/bbtools_39.10.sif"
    shell:
        """
        polyfilter.sh {params.mem} \
        in1={input.fastq1} \
        in2={input.fastq2} \
        out1={output.fastq_out1} \
        out2={output.fastq_out2} \
        outb={output.outb} \
        polymers=GC 
        """

rule bbduk_polyg:
    input:
        fastq1="data/fastq_bbtools_filtered/{sample}_R1_001.polyfilter.fastq.gz",
        fastq2="data/fastq_bbtools_filtered/{sample}_R2_001.polyfilter.fastq.gz",
    output:
        fastq_out1="data/fastq_bbtools_filtered/{sample}_R1_001.bbdukpoly.fastq.gz",
        fastq_out2="data/fastq_bbtools_filtered/{sample}_R2_001.bbdukpoly.fastq.gz",
        stats="data/fastq_bbtools_filtered/{sample}.bbdukpolyGstats"
    params:
        mem="-Xmx55g"
    resources:
        threads=10,
        runtime="4h",
        mem_mb=60000
    singularity:
        "containers/bbtools_39.10.sif"
    shell:
        """
        bbduk.sh {params.mem} \
        in1={input.fastq1} {params.mem} \
        in2={input.fastq2} \
        out1={output.fastq_out1} \
        out2={output.fastq_out2} \
        minlen=140 \
        threads={resources.threads} \
        literal="polyG,polyC,polyGC,polyGA,polyGT" \
        trimpolya=20 \
        trimpolyg=20 \
        trimpolyc=20 \
        stats={output.stats}
        """

rule fastqc_after_filtering_bbtools:
    input:
       fastq="data/fastq_bbtools_filtered/{sample}_{pair}_001.bbdukpoly.fastq.gz"
    output:
        fastqc_html="results/fastqc_filtered_bbtools/{sample}_{pair}_001.bbdukpoly_fastqc.html",
        fastqc_zip="results/fastqc_filtered_bbtools/{sample}_{pair}_001.bbdukpoly_fastqc.zip"
    params:
        outdir="results/fastqc_filtered_bbtools",
    resources:
        threads = 4,
        mem_mb = 24000,
        runtime = "4h"
    singularity:
        "containers/fastqc_0.12.1.sif"
    shell:
        """
        fastqc {input} \
        --threads {resources.threads} \
        --outdir {params.outdir} \
        --kmers 7 
        """

rule multiqc_after_filtering_bbtools:
    input:
        expand("results/fastqc_filtered_bbtools/{sample}_{pair}_001.bbdukpoly_fastqc.zip", sample=fastq_name, pair=config["pair"])
    output:
        "results/multiqc_filtered_bbtools/multiqc_report_bbtools.html"
#    conda:
#        "envs/multiqc.yaml"
    singularity:
        "containers/multiqc_v1.25.sif"
    shell:
        "multiqc results/fastqc_filtered_bbtools/*bbdukpoly_fastqc.zip -o results/multiqc_filtered_bbtools"
#--------------------------------------------------------------------------------------------------------------------------------------------------#
# Create Genome Indices
#--------------------------------------------------------------------------------------------------------------------------------------------------#
rule bwa_index:
    input:
        "data/genome/{genome}.fasta",
    output:
        idx=multiext("data/genome/{genome}.fasta", ".amb", ".ann", ".bwt", ".pac", ".sa")
    resources:
        threads= 3,
        runtime= "2h"
    singularity:
        "containers/bwa_0.7.18.sif"
    shell:
        """
        bwa index {input}
        """

rule createSeqdict:
    input:
        genome_fasta="data/genome/{genome}.fasta"
    output:
        genome_fasta_dict="data/genome/{genome}.dict"
    resources:
        threads=4,
        runtime="5h",
    singularity:
        "containers/picard_3.2.0.sif"
    shell:
        """
        java -jar /usr/picard/picard.jar CreateSequenceDictionary \
        --REFERENCE {input} \
        --OUTPUT {output}
        """

rule createSeqfai:
    input:
        genome_fasta="data/genome/{genome}.fasta"
    output:
        genome_index="data/genome/{genome}.fasta.fai"
    resources:
        threads= 4,
        runtime= "2h",
    singularity:
        "containers/samtools_1.20.c.sif"
    shell:
        """
        samtools faidx {input}
        """
#--------------------------------------------------------------------------------------------------------------------------------------------------#
# Mapping
#--------------------------------------------------------------------------------------------------------------------------------------------------#
rule bwa_mem:
    input:
        fastq1="data/fastq_filtered/{sample}_R1_001.filtered.fastq.gz",
        fastq2="data/fastq_filtered/{sample}_R2_001.filtered.fastq.gz",
        genome_fasta="data/genome/ASM69896v1_HiC.fasta"
        amb="data/genome/ASM69896v1_HiC.fasta.amb",
        ann="data/genome/ASM69896v1_HiC.fasta.ann",
        bwt="data/genome/ASM69896v1_HiC.fasta.bwt",
        pac="data/genome/ASM69896v1_HiC.fasta.pac",
        sa="data/genome/ASM69896v1_HiC.fasta.sa"
    output:
        sam=temp("results/mapped/{sample}.sam")
    params:
        readgroup=lambda wildcards: get_readgroup(wildcards.sample)
    resources:
        threads= 18,
        runtime= "18h",
        mem_mb= 115200,
        tmpdir="$SNIC_TMP"
    singularity:
        "containers/bwa_0.7.18.sif",
    shell:
        """
        bwa mem -M -t {resources.threads} -R {params.readgroup} {input.genome_fasta} {input.fastq1} {input.fastq2} > {output.sam}
        """
#--------------------------------------------------------------------------------------------------------------------------------------------------#
# SAM to BAM - Sorting - Getting BAM statistics
#--------------------------------------------------------------------------------------------------------------------------------------------------#
rule samtools_sam:
    input:
        sam="results/mapped/{sample}.sam"
    output:
        bam=temp("results/mapped/{sample}.sorted.bam"),
        bai="results/mapped/{sample}.sorted.bai",
        flagstats="results/mapped/{sample}.flagstats.txt",
        idxstat="results/mapped/{sample}.idxstat.txt"
    resources:
        threads= 10,
        runtime= "10h",
        tmpdir="$SNIC_TMP"
    benchmark:
        "benchmark/samtools_sam/{sample}.samtools_sam.txt"
    singularity:
        "containers/samtools_1.20.c.sif"
    shell:
        """
        samtools flagstat {input.sam} > {output.flagstats}
        samtools sort {input.sam} -T {resources.tmpdir} -O BAM | tee {output.bam} | samtools index - {output.bai}
        samtools idxstats {output.bam} > {output.idxstat}
        """
#--------------------------------------------------------------------------------------------------------------------------------------------------#
# Mark duplicates in BAM file
#--------------------------------------------------------------------------------------------------------------------------------------------------#
rule markduplicates_bam:
    input:
        bam="results/mapped/{sample}.sorted.bam"
    output:
        dedupBam=protected("results/mapped_dedup/{sample}.dedup.bam"),
        metrics="results/mapped_dedup/{sample}.metrics.txt"
    resources:
        threads=15,
        runtime="12h",
        mem_mb=90000,
        tmpdir="$SNIC_TMP"
    params:
        mem= "-Xmx90g"
    benchmark:
        "benchmark/mapped_dedup/{sample}.picardMarkDuplicates.txt"
    singularity:
        "containers/picard_3.2.0.sif"
    shell:
        """
        java {params.mem} -jar /usr/picard/picard.jar MarkDuplicates --INPUT {input} --OUTPUT {output.dedupBam} --METRICS_FILE {output.metrics} --TMP_DIR {resources.tmpdir} \
        --VALIDATION_STRINGENCY LENIENT \
        --ASSUME_SORT_ORDER coordinate \
        --CREATE_INDEX TRUE
        """
# # Create a list of intervals for scaffolds larger than 1000 bp to use with Haplotype Caller: Remove min_scaf_len, include everything
# rule create_intervals:
#     input:
#         genome="data/genome/ASM69896v1_HiC.fasta"
#     output:
#         intervals=expand("config/intervals/interval_{num}.bed", num=[i for i in range(1, 17)])
#     params:
#         min_scaf_len = 1000,
#         num_scafs_per_interval = 4
#     shell:
#         """
#         python workflow/scripts/split_fasta.py data/genome/ASM69896v1_HiC.fasta {params.min_scaf_len} {params.num_scafs_per_interval} "config/intervals"
#         """
#--------------------------------------------------------------------------------------------------------------------------------------------------#
rule create_intervals:
    input:
        genome="data/genome/Lbolanderi.fasta"
    output:
        intervals=expand("config/intervals/interval_{num}.bed", num=[i for i in range(1, 48)])
    params:
        num_scafs_per_interval = 300,
        intervals_dir="config/intervals"
    shell:
        """
        python workflow/scripts/split_fasta.py {input.genome} {params.num_scafs_per_interval} {params.intervals_dir}
        """
#--------------------------------------------------------------------------------------------------------------------------------------------------#
rule HaplotypeCaller_gvcf:
    input:
        genome_fasta="data/genome/ASM69896v1_HiC.fasta",
        genome_fasta_dict="data/genome/ASM69896v1_HiC.dict",
        genome_index="data/genome/ASM69896v1_HiC.fasta.fai",
        bam="results/mapped_dedup/{sample}.dedup.bam"
    output:
        gvcf="results/gvcf/{sample}/{sample}.{num}.gvcf"
    resources:
        threads=2,
        mem_mb=12000,
        runtime="24h",
        tmpdir="$SNIC_TMP"
    params:
        mem= "-Xmx12g",
        interval="config/intervals/interval_{num}.bed",
        ploidy=lambda wildcards: get_ploidy(wildcards.sample)
    singularity:
        "containers/gatk_4.6.0.0.sif"
    shell:
        """
        gatk --java-options {params.mem} HaplotypeCaller \
        -R {input.genome_fasta} \
        -I {input.bam} \
        -O {output.gvcf} \
        -L {params.interval} \
        -ploidy {params.ploidy} \
        --tmp-dir {resources.tmpdir} \
        -ERC GVCF
        """
#--------------------------------------------------------------------------------------------------------------------------------------------------#

# rule HaplotypeCaller_gvcf:
#     input:
#         genome_fasta="data/genome/ASM69896v1_HiC.fasta",
#         genome_fasta_dict="data/genome/ASM69896v1_HiC.dict",
#         genome_index="data/genome/ASM69896v1_HiC.fasta.fai",
#         bam="results/mapped_dedup/{sample}.dedup.bam"
#     output:
#         gvcf="results/gvcf/{sample}/{sample}.{num}.gvcf"
#     resources:
#         threads=10,
#         mem_mb=64000,
#         runtime="48h",
#         tmpdir="$SNIC_TMP"
#     params:
#         mem= "-Xmx64g",
#         interval="config/intervals/interval_{num}.bed"
#     benchmark:
#         "benchmark/gatk_haplotypecaller/{sample}.{num}.gatkHaplotypeCaller.txt"
#     singularity:
#         "containers/gatk_4.6.0.0.sif"
#     shell:
#         """
#         gatk --java-options {params.mem} HaplotypeCaller \
#         -R {input.genome_fasta} \
#         -L {params.interval} \
#         -I {input.bam} \
#         -O {output} \
#         --tmp-dir {resources.tmpdir} \
#         -ERC GVCF
#         """

# # for interval in {1..70}
# # do
# # cat readgroup6x.txt | while read line
# # do 
# # sample=$(echo $line | cut -f1 -d " ")
# # echo -e ${sample}'\t'/proj/snic2020-6-293/private/result/haplotype_caller_polyploids/${sample}/${sample}.interval_${interval}.gvcf \
# # >> /proj/snic2020-6-293/private/result/genomicsdbimport_polyploids/hexa_db_samplemap/interval_${interval}.sample_map 
# # done
# # done

# # for interval in ${db}/*.sample_map
# # do
# # echo $interval
# # interval_n=$(echo $interval | cut -f8 -d "/" | cut -f1 -d ".")
# # echo $interval_n
# # echo ${interval_n}.sample_map 
# # sbatch genomicsdbimport.sh ${db}/${interval_n} ${bed}/${interval_n}.bed ${db}/${interval_n}.sample_map 
# # done

# rule create_gdb_mapfile:
#     input:
#         gvcf="results/gvcf/${sample}/${sample}.interval_${interval}.gvcf"
#     output:
#         sample_map="config/sample_map/interval_{num}.sample_map"
#     shell:
#     """
#         for interval in {1..70}
#         do
#         cat sample_design_table.tsv | while read line
#         do 
#         sample=$(echo $line | cut -f1 -d " ")
#         echo -e ${sample}'\t'results/gvcf/${sample}/${sample}.interval_${interval}.gvcf \
#         >> config/sample_map/interval_${interval}.sample_map 
#         done
#         done
#     """


# # Let's do two types of genotyping.One with all samples together, and one per each family.
# rule genomicsdbimport:
#     input:
#         sample_map="config/sample_map/interval_{num}.sample_map"
#     output:
#         db=directory("results/genomicsdb/interval_{num}_gdb")
#     resources:
#         threads=10,
#         mem_mb=64000,
#         runtime="48h",
#         tmpdir="$SNIC_TMP"
#     params:
#         mem= "-Xmx64g",
#         interval="config/intervals/interval_{num}.bed"
#     benchmark:
#         "benchmark/gatk_haplotypecaller/{sample}.{num}.genomicsdbimport.txt"
#     singularity:
#         "containers/gatk_4.6.0.0.sif"
#     shell:
#         """
#         gatk --java-options {params.mem} GenomicsDBImport \
#         --genomicsdb-workspace-path {output} \
#         --intervals {params.interval} \
#         --batch-size 50 \
#         --sample-name-map {input.sample_map} \
#         --tmp-dir {resources.tmpdir} \
#         --reader-threads {resources.threads}
#         """

# rule GenotypeGVCFs:
#     input:
#         db="results/genomicsdb/interval_{num}_gdb"
#         genome_fasta="data/genome/{genome}.fasta"
#     output:
#         vcf="results/vcf/ostrich_families_{num}.vcf"
#     resources:
#         threads=10,
#         mem_mb=64000,
#         runtime="48h",
#         tmpdir="$SNIC_TMP"
#     params:
#         mem= "-Xmx64g",
#         interval="config/intervals/interval_{num}.bed"
#     benchmark:
#         "benchmark/gatk_haplotypecaller/{sample}.{num}.genotypeGVCF.txt"
#     singularity:
#         "containers/gatk_4.6.0.0.sif"
#     shell:
#         """
#         gatk --java-options {params.mem} GenotypeGVCFs \
#         -R {input.genome_fasta} \
#         -V gendb://{input.db} \
#         -O {output}
#         --tmp-dir {resources.tmpdir}
#         """

# # for interval in ${db}/*.sample_map
# # do
# # echo $interval
# # interval_n=$(echo $interval | cut -f8 -d "/" | cut -f1 -d ".")
# # echo $interval_n
# # echo "gendb://${db}/${interval_n}"
# # sbatch genotypeGVCF.sh ${genomedir} "gendb://${db}/${interval_n}" ${vcf}/${interval_n}.vcf
# # done
# The help session was very helpful! What I took out of the session:
# 1. Go back to filtering and make sure filtering is done correctly. You can try adding --adapter_fasta in fastp and adding polyG and any other over-represented sequence as adaptors.
# 2. Check the quality of the sequences and see how they have changed.
# 3. Use samtools idxstats to get the statistics for the Bam files
# 4. Remove scaffolds with no reads mapping to them from the GATK analyses
# 5. Reduce the number of cores for the GATK HaplotypeCaller and increase the number of intervals so the work is done faster
