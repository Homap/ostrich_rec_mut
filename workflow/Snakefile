__author__ = "Homa Papoli Yazdi"
__email__ = "homa.papoli_yazdi@biol.lu.se"

configfile: "config/config.yaml"

import pandas as pd
import os

localrules: all#, multiqc

design_table = pd.read_table(config["sample_table"], sep="\t") # index the pandas table
sample_name = design_table.Sample_Name
fastq_name = design_table.Fastq_Name
fastq1 = design_table.fq1
fastq2 = design_table.fq2
all_fastq = list(fastq1) + list(fastq2)
all_samples = [sample.split("/")[-1].split(".")[0] for sample in all_fastq]

rule all:
    input: 
        html_output = expand("results/fastqc/{sample}_fastqc.html", sample=fastq_name)
# rule all:
#     input:
#         "results/multiqc/multiqc_report.html"

# rule all:
#     input:
#         expand("result/fastp_report/{readname}.html", readname=read_name)

rule fastqc:
    input:
       fastq1="data/fastq/{sample}_R1_001.fastq.gz",
       fastq2="data/fastq/{sample}_R2_001.fastq.gz"
    output:
        fastqc_html="results/fastqc/{sample}_fastqc.html"
    params:
        outdir="results/fastqc",
        sample_adapter="data/adapters/adapters.txt"
    log:
        log_file="logs/fastqc/fastqc_{sample}.log"
    resources:
        threads = 4,
        mem_mb = 24000,
        runtime = "2h"
    conda:
        "envs/fastqc.yaml"
    shell:
        """
        fastqc {input} \
        threads {resources.threads} \
        --outdir {params.outdir} \
        --kmers 7 \
        --adapters {params.sample_adapter} \
        &> {log.log_file} 
        """
# #snakemake --rerun-incomplete --executor slurm --default-resources slurm_account=naiss2024-5-92 slurm_partition=core --jobs=10 --printshellcmds --cores=10 --latency-wait=60 --use-conda
# rule multiqc:
#     input:
#         expand("results/fastqc/{sample}_fastqc.html", sample=all_samples)
#     output:
#         "results/multiqc/multiqc_report.html"
#     conda:
#         "envs/multiqc.yaml"
#     shell:
#         "multiqc results/fastqc/*fastqc.zip -o results/multiqc"
# # WA-3565-13-100	data/fastq/WA-3565-13-100_S31_L004_R1_001.fastq.gz	
# rule filtering_fastp:
#     input:
#         fastq1="data/fastq/{readname}_R1_001.fastq.gz",
#         fastq2="data/fastq/{readname}_R2_001.fastq.gz"
#     output:
#         fastq1_filtered="data/fastq_filtered/{readname}_R1_001.filtered.fastq.gz",
#         fastq2_filtered="data/fastq_filtered/{readname}_R2_001.filtered.fastq.gz",
#         unpaired1="data/fastq_unpaired/{readname}_unpaired1.fastq.gz",
#         unpaired2="data/fastq_unpaired/{readname}_unpaired2.fastq.gz",
#         failed_out="data/fastq_failed/{readname}.failed.fastq.gz",
#         html_report="result/fastp_report/{readname}.html"
#     resources:
#         threads=6,
#         runtime="2h"
#     conda:
#         "envs/fastp.yaml"
#     shell:
#         """
#         fastp \
#         --in1 {input.fastq1} \
#         --in2 {input.fastq2} \
#         --out1 {output.fastq1_filtered} \
#         --out2 {output.fastq2_filtered} \
#         --unpaired1 {output.unpaired1}
#         --unpaired2 {output.unpaired2}
#         --failed_out {output.failed_out} \
#         --html {output.html_report}
#         --trim_poly_g \
#         --qualified_quality_phred=30 \
#         --unqualified_percent_limit=0 \
#         --length_required=140 \
#         --overrepresentation_analysis \
#         --adapter_sequence "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA" \
#         --adapter_sequence_r2 "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT" \
#         --thread 6 
#         """

# genome="ASM69896v1_HiC"

# rule bwa_index:
#     input:
#         "data/genome/{genome}.fasta",
#     output:
#         idx=multiext("data/genome/{genome}", ".amb", ".ann", ".bwt", ".pac", ".sa"),
#     log:
#         "logs/bwa_index/{genome}.log",
#     conda:
#         "envs/bwa.yaml"
#     shell:
#         """
#         bwa index {input}
#         """

# # P18758_101 @RG\\tID:A00187.430.BHVGGJDSXY.1\\tPL:Illumina\\tLB:P18758_101.IDT_10nt_UD_211\\tSM:P18758_101\\tPU:A00187.430.BHVGGJDSXY.1.IDT_10nt_UD_211
# rule bwa_mem:
#     input:
#         reads=["data/fastq_filtered/{readname}_R1_001.filtered.fastq.gz", "data/fastq_filtered/{readname}_R2_001.filtered.fastq.gz"],
#         genome_fasta="data/genome/{genome}.fasta"
#     output:
#         "results/mapped/{readname}.sorted.bam",
#         "results/mapped/{readname}.sorted.bai",
#         "results/mapped/{readname}.flagstats.txt"
#     log:
#         "logs/bwa_mem/{readname}.log",
#     params:
#         readgroup=r"-R '@RG\tID:{sample}\tSM:{sample}'",
#         sorting="none",  # Can be 'none', 'samtools' or 'picard'.
#         sort_order="queryname",  # Can be 'queryname' or 'coordinate'.
#         sort_extra="",  # Extra args for samtools/picard.
#     resources:
#         threads: 8
#     conda:
#         "envs/bwa.yaml"
#         "envs/samtools.yaml"
#     shell:
#         """
#         bwa mem -M -t 8 -R {params.readgroup} {input.genome_fasta} {input.reads} | \
#         tee > (samtools flagstat - > {wildcards.sample}.flagstats.txt) | \
#         samtools sort -O BAM | tee {sample}.sorted.bam | samtools index - {sample}.sorted.bai 2> {log}
#         """

# rule markduplicates_bam:
#     input:
#         bam="results/mapped/{readname}.sorted.bam"
#     output:
#         dedupBam="results/mapped_dedup/{readname}.dedup.bam"
#         metrics="results/mapped_dedup/{readname}.metrics.txt"
#     log:
#         "logs/dedup/{sample}.log"
#     resources:
#         threads:
#     shell:
#         java -Xmx60g -jar $PICARD_ROOT/picard.jar MarkDuplicates --INPUT $1 --OUTPUT $2 --METRICS_FILE $3 \
#         --VALIDATION_STRINGENCY LENIENT \
#         --ASSUME_SORT_ORDER coordinate \
#         --CREATE_INDEX TRUE

# rule HaplotypeCaller_gvcf:
#     input:
#        genome_fasta="data/genome/{genome}.fasta"
#         bam="results/mapped_dedup/{readname}.dedup.bam"
#     output:
#         gvcf="results/gvcf/{readname}.gvcf"
#     params:
#         tmpdir=
#     log:
#         "logs/gvcf/{readname}.log"
#     resources:
#         mem_mb=
#         threads=
#     conda:
#         "envs/GATK.yaml"
#     shell:
#         """
#         java -Xmx18g -jar $GATK_HOME/gatk-package-4.1.4.1-local.jar HaplotypeCaller \
#         -R {input.genome_fasta} \
#         -L $interval \
#         -I {input.bam} \
#         -O {output} \
#         --tmp-dir {tmpdir} \
#         -ERC GVCF
#         """

# # GenomicsDBImport
# rule genomicsdbimport:
#     input:
#         gvcfs=expand("results/gvcf/{readname}.gvcf", readname=samplename)
#     output:
#         db=directory("results/genomicsdb/db")
#     log:
#         "logs/gatk/genomicsdbimport.log"
#     params:
#         intervals="ref"
#     resources:
#         mem_mb=
#         threads=
#     conda:
#         "envs/gatk.yaml"
#     shell:
#         """
#         java -Xmx6g -jar $GATK_HOME/gatk-package-4.1.4.1-local.jar GenomicsDBImport \
#         --genomicsdb-workspace-path $my_database \
#         --intervals $interval \
#         --batch-size 50 \
#         --sample-name-map $cohort_sample_map \
#         --tmp-dir=$TMPDIR 
#         """

# rule GenotypeGVCFs:
#     input:
#         db="results/genomicsdb/db"
#         genome_fasta="data/genome/{genome}.fasta"
#     output:
#         vcf="results/vcf/all_samples.vcf"
#     log:
#         "logs/gatk/genotypeGVCF.log"
#     params:

#     resources:
#         mem_mb:
#         threads:
#     conda:
#         "envs/gatk.yaml"
#     shell:
#         """
#         java -Xmx6g -jar $GATK_HOME/gatk-package-4.1.4.1-local.jar GenotypeGVCFs \
#         -R {input.genome_fasta} \
#         -V {input.db} \
#         -O {output}
#         --tmp-dir {tmpdir}
#         """
